<!DOCTYPE mapper  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--namespace命名空间，为了对sql语句进行隔离，方便管理，mapper开发dao方式，使用namespace有特殊作用  
mapper代理开发时将namespace指定为mapper接口的全限定名  
 -->
<mapper namespace="com.chengxusheji.mapper.ReceptionMapper"> 
<!--在mapper.xml文件中配置很多的sql语句，执行每个sql语句时，封装为MappedStatement对象 
mapper.xml以statement为单位管理sql语句  
 -->
	<!-- 添加接待记录 -->
	<insert id="addReception" parameterType="reception">
		insert into t_reception(receptType,title,content,receptDate) values 
		(#{receptType},#{title},#{content},#{receptDate})
	</insert>

	<!-- 按照查询条件分页查询接待记录 -->
	<select id="queryReception" resultMap="receptionMap" >
		select t_reception.* from t_reception ${where} limit #{startIndex},#{pageSize}
	</select>
	<resultMap id="receptionMap" type="reception">
        <id property="receptionId" column="receptionId" />
    </resultMap>

    <!-- 按照查询条件查询所有接待记录 -->
	<select id="queryReceptionList" resultMap="receptionMap" >
		select t_reception.* from t_reception ${where}
	</select>

    <!-- 按照查询条件的接待记录数 -->
	<select id="queryReceptionCount" resultType="int">
		select count(*) from t_reception ${where}
	</select>

	<!-- 根据主键查询某个接待记录 -->
	<select id="getReception" parameterType="int" resultMap="receptionMap">
		select * from t_reception where t_reception.receptionId = #{receptionId}
	</select>

	<!-- 更新接待记录 -->
	<update id="updateReception" parameterType="reception">
		update t_reception set receptType=#{receptType},title=#{title},content=#{content},receptDate=#{receptDate} where receptionId = #{receptionId}
	</update>

	<!-- 删除接待记录 -->
	<delete id="deleteReception" parameterType="int">
		delete from t_reception where receptionId=#{receptionId}
	</delete>

</mapper>
